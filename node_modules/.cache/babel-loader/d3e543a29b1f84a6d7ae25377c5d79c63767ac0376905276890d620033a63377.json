{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport api from \"../../api/api.js\";\nexport default {\n  data: function data() {\n    return {\n      keyword_count: null,\n      keyword_check: false,\n      keyword_check_result: \"\",\n      twitter_account: \"\",\n      twitter_account_id: null,\n      twitter_account_response: null,\n      twitter_account_check: false,\n      twitter_account_result: null,\n      tweet_url: \"\",\n      tweet_id: null,\n      tweet_url_response: null,\n      tweet_url_check: false,\n      tweet_url_result: null\n    };\n  },\n  methods: {\n    checkKeywordPromise: function checkKeywordPromise() {\n      var _this = this;\n      return new Promise(function (resolve) {\n        api.checkKeyword({\n          keyword: _this.keyword\n        }).then(function (response) {\n          _this.keyword_count = response[\"data\"];\n          if (_this.keyword_count < 5000) {\n            _this.keyword_check = true;\n            _this.keyword_check_result = \"指定されたキーワードの直近７日間の利用数は\" + String(_this.keyword_count) + \"回であり、利用可能です。\";\n          } else {\n            _this.keyword_check = false;\n            _this.keyword_check_result = \"指定されたキーワードの直近７日間の利用数は\" + String(_this.keyword_count) + \"回であり、利用数が多すぎます。別のキーワードをご利用ください\";\n          }\n          resolve(\"resolved\");\n        })[\"catch\"](function (error) {\n          _this.$toast.show(\"キーワードのチェックに失敗しました\", {\n            type: \"error\",\n            position: \"top-right\",\n            duration: 5000\n          });\n          console.log(\"error: \", error);\n          resolve(\"rejected\");\n        });\n      });\n    },\n    checkTwitterAccountPromise: function checkTwitterAccountPromise() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        api.checkTwitterAccount({\n          username: _this2.twitter_account\n        }).then(function (response) {\n          _this2.twitter_account_response = response[\"data\"];\n          if (_this2.twitter_account_response != \"NotFound\") {\n            _this2.twitter_account_check = true;\n            _this2.twitter_account_id = _this2.twitter_account_response[\"id\"];\n            _this2.twitter_account_result = String(_this2.twitter_account_response[\"username\"]) + \" : \" + String(_this2.twitter_account_response[\"description\"]);\n          } else {\n            _this2.twitter_account_check = false;\n            _this2.twitter_account_result = \"入力いただいたusernameのアカウントは見つかりませんでした。\";\n          }\n          resolve(\"resolve\");\n        })[\"catch\"](function (error) {\n          _this2.$toast.show(\"アカウントチェックに失敗しました\", {\n            type: \"error\",\n            position: \"top-right\",\n            duration: 5000\n          });\n          console.log(\"error: \", error);\n          resolve(\"reject\");\n        });\n      });\n    },\n    checkTweetPromise: function checkTweetPromise() {\n      var _this3 = this;\n      return new Promise(function (resolve) {\n        api.checkTweet({\n          tweet_url: _this3.tweet_url\n        }).then(function (response) {\n          _this3.tweet_url_response = response[\"data\"];\n          if (_this3.tweet_url_response != \"NotFound\") {\n            _this3.tweet_url_check = true;\n            _this3.tweet_id = _this3.tweet_url_response[\"data\"][\"id\"];\n            _this3.tweet_url_result = String(_this3.tweet_url_response[\"includes\"][\"users\"][0][\"username\"]) + \" : \" + String(_this3.tweet_url_response[\"data\"][\"text\"]);\n          } else {\n            _this3.tweet_url_check = false;\n            _this3.tweet_url_result = \"入力いただいたtweetは見つかりませんでした。\";\n          }\n          resolve(\"resolve\");\n        })[\"catch\"](function (error) {\n          _this3.$toast.show(\"ツイートチェックに失敗しました\", {\n            type: \"error\",\n            position: \"top-right\",\n            duration: 5000\n          });\n          console.log(\"error: \", error);\n          resolve(\"reject\");\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["api","data","keyword_count","keyword_check","keyword_check_result","twitter_account","twitter_account_id","twitter_account_response","twitter_account_check","twitter_account_result","tweet_url","tweet_id","tweet_url_response","tweet_url_check","tweet_url_result","methods","checkKeywordPromise","Promise","resolve","checkKeyword","keyword","then","response","String","error","$toast","show","type","position","duration","console","log","checkTwitterAccountPromise","checkTwitterAccount","username","checkTweetPromise","checkTweet"],"sources":["/Users/kazuaki.aihara/Documents/hanabi-admin/src/assets/mixins/Checks.js"],"sourcesContent":["import api from \"../../api/api.js\";\n\nexport default {\n  data: () => ({\n    keyword_count: null,\n    keyword_check: false,\n    keyword_check_result: \"\",\n\n    twitter_account: \"\",\n    twitter_account_id: null,\n    twitter_account_response: null,\n    twitter_account_check: false,\n    twitter_account_result: null,\n\n    tweet_url: \"\",\n    tweet_id: null,\n    tweet_url_response: null,\n    tweet_url_check: false,\n    tweet_url_result: null,\n  }),\n  methods: {\n    checkKeywordPromise: function () {\n      return new Promise((resolve) => {\n        api\n          .checkKeyword({\n            keyword: this.keyword,\n          })\n          .then((response) => {\n            this.keyword_count = response[\"data\"];\n            if (this.keyword_count < 5000) {\n              this.keyword_check = true;\n              this.keyword_check_result =\n                \"指定されたキーワードの直近７日間の利用数は\" +\n                String(this.keyword_count) +\n                \"回であり、利用可能です。\";\n            } else {\n              this.keyword_check = false;\n              this.keyword_check_result =\n                \"指定されたキーワードの直近７日間の利用数は\" +\n                String(this.keyword_count) +\n                \"回であり、利用数が多すぎます。別のキーワードをご利用ください\";\n            }\n            resolve(\"resolved\");\n          })\n          .catch((error) => {\n            this.$toast.show(\"キーワードのチェックに失敗しました\", {\n              type: \"error\",\n              position: \"top-right\",\n              duration: 5000,\n            });\n            console.log(\"error: \", error);\n            resolve(\"rejected\");\n          });\n      });\n    },\n    checkTwitterAccountPromise: function () {\n      return new Promise((resolve) => {\n        api\n          .checkTwitterAccount({\n            username: this.twitter_account,\n          })\n          .then((response) => {\n            this.twitter_account_response = response[\"data\"];\n            if (this.twitter_account_response != \"NotFound\") {\n              this.twitter_account_check = true;\n              this.twitter_account_id = this.twitter_account_response[\"id\"];\n              this.twitter_account_result =\n                String(this.twitter_account_response[\"username\"]) +\n                \" : \" +\n                String(this.twitter_account_response[\"description\"]);\n            } else {\n              this.twitter_account_check = false;\n              this.twitter_account_result =\n                \"入力いただいたusernameのアカウントは見つかりませんでした。\";\n            }\n            resolve(\"resolve\");\n          })\n          .catch((error) => {\n            this.$toast.show(\"アカウントチェックに失敗しました\", {\n              type: \"error\",\n              position: \"top-right\",\n              duration: 5000,\n            });\n            console.log(\"error: \", error);\n            resolve(\"reject\");\n          });\n      });\n    },\n    checkTweetPromise: function () {\n      return new Promise((resolve) => {\n        api\n          .checkTweet({\n            tweet_url: this.tweet_url,\n          })\n          .then((response) => {\n            this.tweet_url_response = response[\"data\"];\n            if (this.tweet_url_response != \"NotFound\") {\n              this.tweet_url_check = true;\n              this.tweet_id = this.tweet_url_response[\"data\"][\"id\"];\n              this.tweet_url_result =\n                String(\n                  this.tweet_url_response[\"includes\"][\"users\"][0][\"username\"]\n                ) +\n                \" : \" +\n                String(this.tweet_url_response[\"data\"][\"text\"]);\n            } else {\n              this.tweet_url_check = false;\n              this.tweet_url_result =\n                \"入力いただいたtweetは見つかりませんでした。\";\n            }\n            resolve(\"resolve\");\n          })\n          .catch((error) => {\n            this.$toast.show(\"ツイートチェックに失敗しました\", {\n              type: \"error\",\n              position: \"top-right\",\n              duration: 5000,\n            });\n            console.log(\"error: \", error);\n            resolve(\"reject\");\n          });\n      });\n    },\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}