{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  key: 0,\n  \"class\": \"pi pi-spin pi-spinner text-xs px-1\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_BaseButton = _resolveComponent(\"BaseButton\");\n  return _openBlock(), _createBlock(_component_BaseButton, {\n    disabled: $props.disabled || $setup.isLoading,\n    \"class\": _normalizeClass($setup.buttonClass),\n    onClick: $setup.handleClick\n  }, {\n    \"default\": _withCtx(function () {\n      return [$setup.isLoading ? (_openBlock(), _createElementBlock(\"i\", _hoisted_1)) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"disabled\", \"class\", \"onClick\"]);\n}","map":{"version":3,"mappings":";;;EAMO,SAAM;;;;uBALXA,aAMaC;IALVC,QAAQ,EAAEC,eAAQ,IAAIC,gBAAS;IAC/B,SAAKC,gBAAED,kBAAW;IAClBE,OAAK,EAAEF;;wBAER;MAAA,OAAiE,CAAbA,gBAAS,kBAA7DG,oBAAiE,KAAjEC,UAAiE,oDAAQC","names":["_createBlock","_component_BaseButton","disabled","$props","$setup","_normalizeClass","onClick","_createElementBlock","_hoisted_1","_ctx"],"sourceRoot":"","sources":["/Users/kazuaki.aihara/Documents/fuelcrypto-organizer/src/components/buttons/DoButton.vue"],"sourcesContent":["<template>\n  <BaseButton\n    :disabled=\"disabled || isLoading\"\n    :class=\"buttonClass\"\n    @click=\"handleClick\"\n  >\n    <i class=\"pi pi-spin pi-spinner text-xs px-1\" v-if=\"isLoading\" /><slot />\n  </BaseButton>\n</template>\n\n<script>\nimport { computed, ref } from \"vue\";\nimport BaseButton from \"./BaseButton.vue\";\n\nexport default {\n  name: \"DoButton\",\n  components: {\n    BaseButton,\n  },\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    clickFunction: {\n      type: Function,\n    },\n    values: {\n      type: Object,\n      default: null,\n    },\n  },\n  emits: {\n    click: null,\n  },\n  setup(props, { emit }) {\n    let isLoading = ref(false);\n\n    const handleClick = async function () {\n      isLoading.value = true;\n      await props.clickFunction();\n      isLoading.value = false;\n      emit(\"click\");\n    };\n    const buttonClass = computed(() =>\n      props.disabled || isLoading.value\n        ? \"text-gray-300 bg-gray-700 hover:bg-gray-800\"\n        : \"text-blue-50 bg-blue-500 hover:bg-blue-600\"\n    );\n\n    return {\n      handleClick,\n      buttonClass,\n      isLoading,\n    };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}