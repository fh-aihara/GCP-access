{"ast":null,"code":"import axios from \"axios\";\nimport mock from \"./mock/api\";\n// import { getAuth } from \"@firebase/auth\";\n\nexport var client = axios.create({\n  baseURL: \"http://127.0.0.1:8000\"\n});\n\n// client.interceptors.request.use(async (config: AxiosRequestConfig) => {\n//   const user = getAuth().currentUser;\n//   const token = await user.getIdToken(true); //force update= true\n//   config.headers[\"Authorization\"] = token;\n//   return request;\n// });\n\n// モック起動\nif (JSON.parse(process.env.VUE_APP_USE_MOCK)) {\n  mock.run(client);\n}\nexport default {\n  /**\n   * Todoリスト取得API\n   * 結果はPromiseを返してハンドリングする\n   * @param {Object} params パラメータ\n   */\n  getAccounts: function getAccounts(params) {\n    return client.get(\"/accounts\", {\n      params: params\n    }, config);\n  },\n  createAccount: function createAccount(params) {\n    return client.post(\"/accounts\", params, config);\n  },\n  getOrganizers: function getOrganizers(params) {\n    return client.get(\"/organizers\", params, config);\n  },\n  createOrganizer: function createOrganizer(params) {\n    return client.post(\"/organizers\", params, config);\n  },\n  getCampaigns: function getCampaigns(params) {\n    return client.get(\"/campaigns\", {\n      params: params\n    }, config);\n  },\n  createCampaign: function createCampaign(params) {\n    return client.post(\"/campaigns\", params, config);\n  }\n};","map":{"version":3,"names":["axios","mock","client","create","baseURL","JSON","parse","process","env","VUE_APP_USE_MOCK","run","getAccounts","params","get","config","createAccount","post","getOrganizers","createOrganizer","getCampaigns","createCampaign"],"sources":["/Users/kazuaki.aihara/Documents/fuelcrypto-organizer/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\nimport mock from \"./mock/api\";\n// import { getAuth } from \"@firebase/auth\";\n\nexport const client = axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n});\n\n// client.interceptors.request.use(async (config: AxiosRequestConfig) => {\n//   const user = getAuth().currentUser;\n//   const token = await user.getIdToken(true); //force update= true\n//   config.headers[\"Authorization\"] = token;\n//   return request;\n// });\n\n// モック起動\nif (JSON.parse(process.env.VUE_APP_USE_MOCK)) {\n  mock.run(client);\n}\n\nexport default {\n  /**\n   * Todoリスト取得API\n   * 結果はPromiseを返してハンドリングする\n   * @param {Object} params パラメータ\n   */\n  getAccounts(params) {\n    return client.get(\"/accounts\", { params: params }, config);\n  },\n  createAccount(params) {\n    return client.post(\"/accounts\", params, config);\n  },\n  getOrganizers(params) {\n    return client.get(\"/organizers\", params, config);\n  },\n  createOrganizer(params) {\n    return client.post(\"/organizers\", params, config);\n  },\n  getCampaigns(params) {\n    return client.get(\"/campaigns\", { params: params }, config);\n  },\n  createCampaign(params) {\n    return client.post(\"/campaigns\", params, config);\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,YAAY;AAC7B;;AAEA,OAAO,IAAMC,MAAM,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,gBAAgB,CAAC,EAAE;EAC5CR,IAAI,CAACS,GAAG,CAACR,MAAM,CAAC;AAClB;AAEA,eAAe;EACb;AACF;AACA;AACA;AACA;EACES,WAAW,uBAACC,MAAM,EAAE;IAClB,OAAOV,MAAM,CAACW,GAAG,CAAC,WAAW,EAAE;MAAED,MAAM,EAAEA;IAAO,CAAC,EAAEE,MAAM,CAAC;EAC5D,CAAC;EACDC,aAAa,yBAACH,MAAM,EAAE;IACpB,OAAOV,MAAM,CAACc,IAAI,CAAC,WAAW,EAAEJ,MAAM,EAAEE,MAAM,CAAC;EACjD,CAAC;EACDG,aAAa,yBAACL,MAAM,EAAE;IACpB,OAAOV,MAAM,CAACW,GAAG,CAAC,aAAa,EAAED,MAAM,EAAEE,MAAM,CAAC;EAClD,CAAC;EACDI,eAAe,2BAACN,MAAM,EAAE;IACtB,OAAOV,MAAM,CAACc,IAAI,CAAC,aAAa,EAAEJ,MAAM,EAAEE,MAAM,CAAC;EACnD,CAAC;EACDK,YAAY,wBAACP,MAAM,EAAE;IACnB,OAAOV,MAAM,CAACW,GAAG,CAAC,YAAY,EAAE;MAAED,MAAM,EAAEA;IAAO,CAAC,EAAEE,MAAM,CAAC;EAC7D,CAAC;EACDM,cAAc,0BAACR,MAAM,EAAE;IACrB,OAAOV,MAAM,CAACc,IAAI,CAAC,YAAY,EAAEJ,MAAM,EAAEE,MAAM,CAAC;EAClD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}