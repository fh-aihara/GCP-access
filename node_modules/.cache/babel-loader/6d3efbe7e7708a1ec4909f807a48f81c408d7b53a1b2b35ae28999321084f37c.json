{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"campaign_analize\"\n};\nvar _hoisted_2 = {\n  \"class\": \"container mx-auto p-4\"\n};\nvar _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  \"class\": \"text-2xl font-bold mb-4 text-white\"\n}, \"Qeury -> BigQuery\", -1 /* HOISTED */);\nvar _hoisted_4 = {\n  \"class\": \"mb-4\"\n};\nvar _hoisted_5 = {\n  key: 0,\n  \"class\": \"mt-4 text-red-500\"\n};\nvar _hoisted_6 = {\n  key: 1,\n  \"class\": \"mt-8\"\n};\nvar _hoisted_7 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  \"class\": \"text-2xl font-bold mb-4 text-white\"\n}, \"Query History\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SideVar = _resolveComponent(\"SideVar\");\n  var _component_PageTitle = _resolveComponent(\"PageTitle\");\n  var _component_DoButton = _resolveComponent(\"DoButton\");\n  var _component_EasyDataTable = _resolveComponent(\"EasyDataTable\");\n  var _component_RightColumnOutline = _resolveComponent(\"RightColumnOutline\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" side var  \"), _createVNode(_component_SideVar), _createCommentVNode(\" main div \"), _createVNode(_component_RightColumnOutline, null, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_PageTitle, null, {\n        \"default\": _withCtx(function () {\n          return [_createTextVNode(\"本番データ取得\")];\n        }),\n        _: 1 /* STABLE */\n      }), _createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"textarea\", {\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $data.sqlQuery = $event;\n        }),\n        \"class\": \"w-full p-2 border rounded\",\n        rows: \"5\",\n        placeholder: \"Enter your SQL query here\"\n      }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.sqlQuery]])]), _createVNode(_component_DoButton, {\n        clickFunction: $options.executeQueryPromise,\n        values: {}\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createTextVNode(\" クエリ実行 \")];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"clickFunction\"]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.queryShow ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_hoisted_7, _createVNode(_component_EasyDataTable, {\n        items: $data.items,\n        headers: $data.headers\n      }, null, 8 /* PROPS */, [\"items\", \"headers\"]), _createCommentVNode(\" <DoButton :clickFunction=\\\"downloadCSVPromise\\\" :values=\\\"{}\\\">\\n            Download CSV\\n          </DoButton> \")])) : _createCommentVNode(\"v-if\", true)])];\n    }),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAkB;;EAMpB,SAAM;AAAuB;8BAChCA,oBAAqE;EAAjE,SAAM;AAAoC,GAAC,mBAAiB;;EAC3D,SAAM;AAAM;;;EAYQ,SAAM;;;;EAIT,SAAM;;8BAC1BA,oBAAiE;EAA7D,SAAM;AAAoC,GAAC,eAAa;;;;;;;;uBAzBpEC,oBAiCM,OAjCNC,UAiCM,GAhCJC,kCAAkB,EAClBC,aAAWC,qBACXF,iCAAiB,EACjBC,aA4BqBE;wBA3BnB;MAAA,OAA8B,CAA9BF,aAA8BG;4BAAnB;UAAA,OAAO,kBAAP,SAAO;;;UAClBP,oBAyBM,OAzBNQ,UAyBM,GAxBJC,UAAqE,EACrET,oBAOM,OAPNU,UAOM,mBANJV,oBAKY;;iBAJDW,cAAQ;QAAA;QACjB,SAAM,2BAA2B;QACjCC,IAAI,EAAC,GAAG;QACRC,WAAW,EAAC;qDAHHF,cAAQ,OAMrBP,aAEWU;QAFAC,aAAa,EAAEC,4BAAmB;QAAGC,MAAM,EAAE;;4BAAI;UAAA,OAE5D,kBAF4D,SAE5D;;;4CAEWN,kBAAY,kBAAvBV,oBAEM,OAFNiB,UAEM,mBADDP,kBAAY,uDAGNA,eAAS,kBAApBV,oBAMM,OANNkB,UAMM,GALJC,UAAiE,EACjEhB,aAAiEiB;QAAjDC,KAAK,EAAEX,WAAK;QAAGY,OAAO,EAAEZ;qDACxCR,yIAEe","names":["_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_SideVar","_component_RightColumnOutline","_component_PageTitle","_hoisted_2","_hoisted_3","_hoisted_4","$data","rows","placeholder","_component_DoButton","clickFunction","$options","values","_hoisted_5","_hoisted_6","_hoisted_7","_component_EasyDataTable","items","headers"],"sourceRoot":"","sources":["/Users/kazuaki.aihara/Documents/GCP-access/src/views/Query.vue"],"sourcesContent":["<template>\n  <div class=\"campaign_analize\">\n    <!-- side var  -->\n    <SideVar />\n    <!-- main div -->\n    <RightColumnOutline>\n      <PageTitle>本番データ取得</PageTitle>\n      <div class=\"container mx-auto p-4\">\n        <h1 class=\"text-2xl font-bold mb-4 text-white\">Qeury -> BigQuery</h1>\n        <div class=\"mb-4\">\n          <textarea\n            v-model=\"sqlQuery\"\n            class=\"w-full p-2 border rounded\"\n            rows=\"5\"\n            placeholder=\"Enter your SQL query here\"\n          ></textarea>\n        </div>\n        <DoButton :clickFunction=\"executeQueryPromise\" :values=\"{}\">\n          クエリ実行\n        </DoButton>\n\n        <div v-if=\"errorMessage\" class=\"mt-4 text-red-500\">\n          {{ errorMessage }}\n        </div>\n\n        <div v-if=\"queryShow\" class=\"mt-8\">\n          <h1 class=\"text-2xl font-bold mb-4 text-white\">Query History</h1>\n          <EasyDataTable :items=\"items\" :headers=\"headers\"></EasyDataTable>\n          <!-- <DoButton :clickFunction=\"downloadCSVPromise\" :values=\"{}\">\n            Download CSV\n          </DoButton> -->\n        </div>\n      </div>\n    </RightColumnOutline>\n  </div>\n</template>\n\n<script>\nimport api from \"../api/api.js\";\n\nexport default {\n  name: \"tableView\",\n  components: {},\n  data() {\n    return {\n      sqlQuery: \"\",\n      errorMessage: \"\",\n      results: [],\n      columns: [],\n      queries: [],\n      queryShow: false,\n      headers: [\n        { text: \"id\", value: \"id\", sortable: true },\n        { text: \"SQL\", value: \"SQL\", sortable: true },\n        { text: \"created_at\", value: \"created_at\", sortable: true },\n        { text: \"title\", value: \"title\", sortable: true },\n        { text: \"description\", value: \"description\", sortable: true },\n        {\n          text: \"last_query_records\",\n          value: \"last_query_records\",\n          sortable: true,\n        },\n      ],\n      items: [],\n    };\n  },\n  mounted() {\n    api.getQueries().then((response) => {\n      console.log(response);\n      this.queries = response.data;\n      this.items = this.queries;\n      this.queryShow = true;\n    });\n  },\n  computed: {},\n  methods: {\n    executeQueryPromise() {\n      return new Promise((resolve) => {\n        console.log(\"executing query...\");\n        api\n          .postBigquery({ sql: this.sqlQuery })\n          .then((response) => {\n            console.log(response);\n            this.results = response.data.results;\n            if (this.results.length > 0) {\n              this.columns = Object.keys(this.results[0]).map((key) => ({\n                label: key,\n                field: key,\n              }));\n              let output =\n                this.columns.map((col) => col.label).join(\",\") + \"\\n\";\n              console.log(this.results.length);\n              for (let i = 0; i < this.results.length; i++) {\n                for (let j = 0; j < this.columns.length; j++) {\n                  output += this.results[i][this.columns[j].label] + \",\";\n                }\n                output += \"\\n\";\n              }\n              let csv = \"\\ufeff\";\n              csv += output;\n              let blob = new Blob([csv], { type: \"text/csv\" });\n              let link = document.createElement(\"a\");\n              link.href = window.URL.createObjectURL(blob);\n              link.download = \"itandi_prod_data.csv\";\n              link.click();\n            } else {\n              this.columns = [];\n            }\n            this.errorMessage = \"\";\n            resolve(\"resolved\");\n          })\n          .catch((error) => {\n            this.errorMessage = \"Error executing query: \" + error.message;\n            this.results = [];\n            this.columns = [];\n            resolve(\"resolved\");\n          });\n      });\n    },\n    downloadCSVPromise() {\n      return new Promise((resolve) => {\n        const headers = this.columns.map((col) => col.label).join(\",\");\n        const rows = this.results\n          .map((row) => this.columns.map((col) => row[col.field]).join(\",\"))\n          .join(\"\\n\");\n        const csvContent = `data:text/csv;charset=utf-8,${headers}\\n${rows}`;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"results.csv\");\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        resolve(\"resolved\");\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}