{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport api from \"../api/api.js\";\nexport default {\n  name: \"tableView\",\n  components: {},\n  data: function data() {\n    return {\n      sqlQuery: \"\",\n      errorMessage: \"\",\n      results: [],\n      columns: [],\n      queries: [],\n      queryShow: false,\n      headers: [{\n        text: \"id\",\n        value: \"id\",\n        sortable: true\n      }, {\n        text: \"SQL\",\n        value: \"SQL\",\n        sortable: true\n      }, {\n        text: \"created_at\",\n        value: \"created_at\",\n        sortable: true\n      }, {\n        text: \"title\",\n        value: \"title\",\n        sortable: true\n      }, {\n        text: \"description\",\n        value: \"description\",\n        sortable: true\n      }, {\n        text: \"last_query_records\",\n        value: \"last_query_records\",\n        sortable: true\n      }],\n      items: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    api.getQueries().then(function (response) {\n      console.log(response);\n      _this.queries = response.data;\n      _this.items = _this.queries;\n      _this.queryShow = true;\n    });\n  },\n  computed: {},\n  methods: {\n    executeQueryPromise: function executeQueryPromise() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        console.log(\"executing query...\");\n        api.postBigquery({\n          sql: _this2.sqlQuery\n        }).then(function (response) {\n          console.log(response);\n          _this2.results = response.data.results;\n          if (_this2.results.length > 0) {\n            _this2.columns = Object.keys(_this2.results[0]).map(function (key) {\n              return {\n                label: key,\n                field: key\n              };\n            });\n            var output = _this2.columns.map(function (col) {\n              return col.label;\n            }).join(\",\") + \"\\n\";\n            console.log(_this2.results.length);\n            for (var i = 0; i < _this2.results.length; i++) {\n              for (var j = 0; j < _this2.columns.length; j++) {\n                output += _this2.results[i][_this2.columns[j].label] + \",\";\n              }\n              output += \"\\n\";\n            }\n            var csv = \"\\uFEFF\";\n            csv += output;\n            var blob = new Blob([csv], {\n              type: \"text/csv\"\n            });\n            var link = document.createElement(\"a\");\n            link.href = window.URL.createObjectURL(blob);\n            link.download = \"itandi_prod_data.csv\";\n            link.click();\n          } else {\n            _this2.columns = [];\n          }\n          _this2.errorMessage = \"\";\n          resolve(\"resolved\");\n        })[\"catch\"](function (error) {\n          _this2.errorMessage = \"Error executing query: \" + error.message;\n          _this2.results = [];\n          _this2.columns = [];\n          resolve(\"resolved\");\n        });\n      });\n    },\n    downloadCSVPromise: function downloadCSVPromise() {\n      var _this3 = this;\n      return new Promise(function (resolve) {\n        var headers = _this3.columns.map(function (col) {\n          return col.label;\n        }).join(\",\");\n        var rows = _this3.results.map(function (row) {\n          return _this3.columns.map(function (col) {\n            return row[col.field];\n          }).join(\",\");\n        }).join(\"\\n\");\n        var csvContent = \"data:text/csv;charset=utf-8,\".concat(headers, \"\\n\").concat(rows);\n        var encodedUri = encodeURI(csvContent);\n        var link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"results.csv\");\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        resolve(\"resolved\");\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["api","name","components","data","sqlQuery","errorMessage","results","columns","queries","queryShow","headers","text","value","sortable","items","mounted","getQueries","then","response","console","log","computed","methods","executeQueryPromise","Promise","resolve","postBigquery","sql","length","Object","keys","map","key","label","field","output","col","join","i","j","csv","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","error","message","downloadCSVPromise","rows","row","csvContent","encodedUri","encodeURI","setAttribute","body","appendChild","removeChild"],"sourceRoot":"","sources":["/Users/kazuaki.aihara/Documents/GCP-access/src/views/Query.vue"],"sourcesContent":["<template>\n  <div class=\"campaign_analize\">\n    <!-- side var  -->\n    <SideVar />\n    <!-- main div -->\n    <RightColumnOutline>\n      <PageTitle>本番データ取得</PageTitle>\n      <div class=\"container mx-auto p-4\">\n        <h1 class=\"text-2xl font-bold mb-4 text-white\">Qeury -> BigQuery</h1>\n        <div class=\"mb-4\">\n          <textarea\n            v-model=\"sqlQuery\"\n            class=\"w-full p-2 border rounded\"\n            rows=\"5\"\n            placeholder=\"Enter your SQL query here\"\n          ></textarea>\n        </div>\n        <DoButton :clickFunction=\"executeQueryPromise\" :values=\"{}\">\n          クエリ実行\n        </DoButton>\n\n        <div v-if=\"errorMessage\" class=\"mt-4 text-red-500\">\n          {{ errorMessage }}\n        </div>\n\n        <div v-if=\"queryShow\" class=\"mt-4\">\n          <EasyDataTable :items=\"items\" :headers=\"headers\"></EasyDataTable>\n          <!-- <DoButton :clickFunction=\"downloadCSVPromise\" :values=\"{}\">\n            Download CSV\n          </DoButton> -->\n        </div>\n      </div>\n    </RightColumnOutline>\n  </div>\n</template>\n\n<script>\nimport api from \"../api/api.js\";\n\nexport default {\n  name: \"tableView\",\n  components: {},\n  data() {\n    return {\n      sqlQuery: \"\",\n      errorMessage: \"\",\n      results: [],\n      columns: [],\n      queries: [],\n      queryShow: false,\n      headers: [\n        { text: \"id\", value: \"id\", sortable: true },\n        { text: \"SQL\", value: \"SQL\", sortable: true },\n        { text: \"created_at\", value: \"created_at\", sortable: true },\n        { text: \"title\", value: \"title\", sortable: true },\n        { text: \"description\", value: \"description\", sortable: true },\n        {\n          text: \"last_query_records\",\n          value: \"last_query_records\",\n          sortable: true,\n        },\n      ],\n      items: [],\n    };\n  },\n  mounted() {\n    api.getQueries().then((response) => {\n      console.log(response);\n      this.queries = response.data;\n      this.items = this.queries;\n      this.queryShow = true;\n    });\n  },\n  computed: {},\n  methods: {\n    executeQueryPromise() {\n      return new Promise((resolve) => {\n        console.log(\"executing query...\");\n        api\n          .postBigquery({ sql: this.sqlQuery })\n          .then((response) => {\n            console.log(response);\n            this.results = response.data.results;\n            if (this.results.length > 0) {\n              this.columns = Object.keys(this.results[0]).map((key) => ({\n                label: key,\n                field: key,\n              }));\n              let output =\n                this.columns.map((col) => col.label).join(\",\") + \"\\n\";\n              console.log(this.results.length);\n              for (let i = 0; i < this.results.length; i++) {\n                for (let j = 0; j < this.columns.length; j++) {\n                  output += this.results[i][this.columns[j].label] + \",\";\n                }\n                output += \"\\n\";\n              }\n              let csv = \"\\ufeff\";\n              csv += output;\n              let blob = new Blob([csv], { type: \"text/csv\" });\n              let link = document.createElement(\"a\");\n              link.href = window.URL.createObjectURL(blob);\n              link.download = \"itandi_prod_data.csv\";\n              link.click();\n            } else {\n              this.columns = [];\n            }\n            this.errorMessage = \"\";\n            resolve(\"resolved\");\n          })\n          .catch((error) => {\n            this.errorMessage = \"Error executing query: \" + error.message;\n            this.results = [];\n            this.columns = [];\n            resolve(\"resolved\");\n          });\n      });\n    },\n    downloadCSVPromise() {\n      return new Promise((resolve) => {\n        const headers = this.columns.map((col) => col.label).join(\",\");\n        const rows = this.results\n          .map((row) => this.columns.map((col) => row[col.field]).join(\",\"))\n          .join(\"\\n\");\n        const csvContent = `data:text/csv;charset=utf-8,${headers}\\n${rows}`;\n        const encodedUri = encodeURI(csvContent);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodedUri);\n        link.setAttribute(\"download\", \"results.csv\");\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        resolve(\"resolved\");\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}